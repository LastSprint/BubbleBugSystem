//
// JsonComparer.cs
// 02.09.2017
// Created by Kravchenkov Alexander
// sprintend@gmail.com
//
//

using System;
using Newtonsoft.Json.Linq;
using System.Linq;

namespace JsonComparation {
    
    public static class JsonComparer {
        
        public static bool CompareTokens(JToken rhs, JToken lhs) {

            if (rhs == null && lhs == null) {
                return true;
            }

            if (rhs != null && lhs == null) {
                return false;
            }

            if (rhs == null && lhs != null) {
                return false;
            }

            if (rhs.Type != lhs.Type) {
                return false;
            }

            if (rhs.Type != JTokenType.Object && rhs.Type != JTokenType.Array && rhs.Type != JTokenType.Property) {
                return rhs.Value<Object>().Equals(lhs.Value<Object>());
            }

            var isCompares = true;

            foreach (var rhsPair in rhs) {
                
                switch (rhsPair.Type) {

                    case JTokenType.Array:
                    case JTokenType.Object:
                    case JTokenType.Property:

                        if (rhs.Type == JTokenType.Array) {
                            isCompares = isCompares && CompareArrays(rhs.Value<JArray>(), lhs.Value<JArray>());
                        }
                        else {
                            var path = rhsPair.Path.Split(".".ToCharArray()).Last();
                            isCompares = isCompares && CompareTokens(rhs[path], lhs[path]);
                        }
                        continue;
                }
            }
            return isCompares;
        }

        private static bool CompareArrays(JArray lhsArr, JArray rhsArr) {
            var lhsArrCount = lhsArr.Count();
            var rhsArrCount = rhsArr.Count();

            if (lhsArrCount != rhsArrCount) {
                return false;
            }

            var equatable = false;

            foreach (var lhs in lhsArr) {
                
                foreach (var rhs in rhsArr) {
                    
                    if (CompareTokens(lhs, rhs)) {
                        equatable = true;
                        break;
                    }
                }
                if (!equatable) {
                    return false;
                }
                equatable = false;
            }

            return true;
        }
    }
}
