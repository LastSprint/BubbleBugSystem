//
// EquatableRequaest.cs
// 29.08.2017
// Created by Kravchenkov Alexander
// sprintend@gmail.com
//

using System;
using System.Collections.Generic;
using System.Linq;

namespace $projectname$ {

	public enum ParameterType {
		Optional = 0,
		Required = 1
	}

	public enum ValueType {
		Object = 0,
		Number = 1,
		String = 2,
		Bool = 3
	}

	public class RequestParameter {
		public ParameterType Type { get; set; }
		public ValueType ValueType { get; set; }

		public object Value { get; set; }
		public string Name { get; set; }

		public RequestParameter(ParameterType paramType, ValueType valueType, object value, string name) {
			this.ValueType = valueType;
			this.Type = paramType;
			this.Value = value;
			this.Name = name;
		}

		public RequestParameter(object value, string name, ParameterType type): this() {
			this.ValueType = this.GetType(value);
			this.Type = type;
			this.Value = value;
			this.Name = name;
		}

		public RequestParameter() { }

		private ValueType GetType(object obj) {
			if (obj is bool) {
				return ValueType.Bool;
			}

			if (obj is int) {
				return ValueType.Number;
			}
			if (obj is string) {
				return ValueType.String;
			}

			return ValueType.Object;
		}

		public override bool Equals(object obj) {

			if (obj == null) {
				return false;
			}

			if (!(obj is RequestParameter)) {
				return false;
			}

			var casted = (RequestParameter)obj;

			if (this.Name != casted.Name) {
				return false;
			}

			return this.Value.Equals(casted.Value);
		}

		public override int GetHashCode() {
			return this.Name.ToCharArray().Cast<int>().Aggregate((x, y) => x ^ y);
		}
	}

	public class EquatableRequaest {

		// Response
		public object ResponseBody { get; set; }
		public int ResponseCode { get; set; }
		public IReadOnlyDictionary<string, string> ResponseHeaders { get; set; }

		// Request

		public IList<RequestParameter> Parameters { get; set; }
		public IReadOnlyDictionary<string, string> RequestHeaders { get; set; }
		public object RequestBody { get; set; }

		public EquatableRequaest(object responseBody, int responseCode, IReadOnlyDictionary<string, string> responseHeaders, IList<RequestParameter> parameters, IReadOnlyDictionary<string, string> requestHeaders, object body) {
			this.ResponseBody = responseBody;
			this.ResponseCode = responseCode;
			this.ResponseHeaders = responseHeaders;
			this.RequestHeaders = requestHeaders;
			this.Parameters = parameters;
			this.ResponseBody = body;
		}

		public EquatableRequaest(object requestBody, IList<RequestParameter> parameters) {
			this.RequestBody = requestBody;
			this.Parameters = parameters;
		}

		public EquatableRequaest() { }

		public override bool Equals(object obj) {
			if (obj == null) {
				return false;
			}

			var casted = obj as EquatableRequaest;

			if (casted == null) {
				return false;
			}

			for (int i = 0; i < this.Parameters.Count; i++) {
				
				if (!this.Parameters[i].Equals(casted.Parameters[i])) {
					return false;
				}
			}

			if (casted.RequestBody == null && this.RequestBody == null) {
                return true;
            }

            if (casted.RequestBody != null && this.RequestBody == null) {
                return false;
            }

            if (casted.RequestBody == null && this.RequestBody != null) {
                return false;
            }

			return casted.RequestBody.Equals(this.RequestBody);
		}

		public override int GetHashCode() {
			return this.Parameters.ToArray().GetHashCode();
		}
	}
}
